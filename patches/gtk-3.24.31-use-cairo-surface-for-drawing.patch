commit 64597822abd91deeadc00f0def4b74cd4b5adb2e
Author: John Ralls <jralls@ceridwen.us>
Date:   Sun Oct 17 14:53:11 2021 -0700

    Use cairo_image_surfaces for most drawing.
    
    Paint to the window's CGContextRef surface only in
    gdk_window_end_paint_internal.
    
    Fixes https://gitlab.gnome.org/GNOME/gtk/-/issues/3714

diff --git a/gdk/quartz/gdkwindow-quartz.c b/gdk/quartz/gdkwindow-quartz.c
index 4ed9dcd544..0c957f2c91 100644
--- a/gdk/quartz/gdkwindow-quartz.c
+++ b/gdk/quartz/gdkwindow-quartz.c
@@ -372,11 +372,12 @@ gdk_quartz_create_cairo_surface (GdkWindowImplQuartz *impl,
 				 int                  width,
 				 int                  height)
 {
-  CGContextRef cg_context;
+  CGContextRef cg_context = NULL;
   GdkQuartzCairoSurfaceData *surface_data;
   cairo_surface_t *surface;
 
-  cg_context = gdk_quartz_window_get_context (impl, TRUE);
+  if (impl->use_cg_context)
+    cg_context = gdk_quartz_window_get_context (impl, TRUE);
 
   surface_data = g_new (GdkQuartzCairoSurfaceData, 1);
   surface_data->window_impl = impl;
@@ -386,7 +387,7 @@ gdk_quartz_create_cairo_surface (GdkWindowImplQuartz *impl,
     surface = cairo_quartz_surface_create_for_cg_context (cg_context,
                                                           width, height);
   else
-    surface = cairo_quartz_surface_create(CAIRO_FORMAT_ARGB32, width, height);
+    surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, width, height);
 
   cairo_surface_set_user_data (surface, &gdk_quartz_cairo_key,
                                surface_data,
@@ -426,12 +427,22 @@ gdk_window_impl_quartz_init (GdkWindowImplQuartz *impl)
   impl->type_hint = GDK_WINDOW_TYPE_HINT_NORMAL;
   impl->view      = NULL;
   impl->toplevel  = NULL;
+  impl->use_cg_context = FALSE;
 }
 
 static gboolean
 gdk_window_impl_quartz_begin_paint (GdkWindow *window)
 {
-  return FALSE;
+  GdkWindowImplQuartz *impl = GDK_WINDOW_IMPL_QUARTZ (window->impl);
+  impl->use_cg_context = FALSE;
+  return TRUE;
+}
+
+static void
+gdk_window_impl_quartz_end_paint (GdkWindow *window)
+{
+  GdkWindowImplQuartz *impl = GDK_WINDOW_IMPL_QUARTZ (window->impl);
+  impl->use_cg_context = TRUE;
 }
 
 static void
@@ -3158,6 +3169,7 @@ gdk_window_impl_quartz_class_init (GdkWindowImplQuartzClass *klass)
   impl_class->get_shape = gdk_quartz_window_get_shape;
   impl_class->get_input_shape = gdk_quartz_window_get_input_shape;
   impl_class->begin_paint = gdk_window_impl_quartz_begin_paint;
+  impl_class->end_paint = gdk_window_impl_quartz_end_paint;
   impl_class->get_scale_factor = gdk_quartz_window_get_scale_factor;
 
   impl_class->focus = gdk_quartz_window_focus;
diff --git a/gdk/quartz/gdkwindow-quartz.h b/gdk/quartz/gdkwindow-quartz.h
index 1175f072e4..c085d5cc59 100644
--- a/gdk/quartz/gdkwindow-quartz.h
+++ b/gdk/quartz/gdkwindow-quartz.h
@@ -64,6 +64,8 @@ struct _GdkWindowImplQuartz
   gint shadow_top;
 
   gint shadow_max;
+
+  gboolean use_cg_context;
 };
  
 struct _GdkWindowImplQuartzClass 
